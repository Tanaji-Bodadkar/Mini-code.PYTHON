# Define the Tic-Tac-Toe board

board = [' ' for _ in range(9)]

# Function to print the board
def print_board(board):
    for row in [board[i*3:(i+1)*3] for i in range(3)]:
        print('|'.join(row))
        print('-' * 5)

# Function to check if a player has won
def check_winner(board, player):
    win_cond = [(0, 1, 2), (3, 4, 5), (6, 7, 8),  # horizontal
                (0, 3, 6), (1, 4, 7), (2, 5, 8),  # vertical
                (0, 4, 8), (2, 4, 6)]             # diagonal
    for cond in win_cond:
        if all(board[i] == player for i in cond):
            return True
    return False

# Function to check if the board is full
def is_board_full(board):
    return ' ' not in board

# Function to make a move on the board
def make_move(board, position, player):
    board[position] = player
def minimax(board, depth, is_maximizing):
    if check_winner(board, 'O'):
        return 1
    elif check_winner(board, 'X'):
        return -1
    elif is_board_full(board):
        return 0

    if is_maximizing:
        best_score = -float('inf')
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'
                score = minimax(board, depth + 1, False)
                board[i] = ' '
                best_score = max(best_score, score)
        return best_score
    else:
        best_score = float('inf')
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'
                score = minimax(board, depth + 1, True)
                board[i] = ' '
                best_score = min(best_score, score)
        return best_score
def find_best_move(board):
    best_score = -float('inf')
    best_move = -1
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'O'
            score = minimax(board, 0, False)
            board[i] = ' '
            if score > best_score:
                best_score = score
                best_move = i
    return best_move
def play_game():
    print("Welcome to Tic-Tac-Toe!")
    print_board(board)
    
    while True:
        # Player move
        move = int(input("Enter your move (1-9): ")) - 1
        if board[move] != ' ':
            print("Invalid move! Try again.")
            continue
        make_move(board, move, 'X')
        
        print_board(board)
        if check_winner(board, 'X'):
            print("You win!")
            break
        if is_board_full(board):
            print("It's a tie!")
            break
        
        # AI move
        print("AI's turn:")
        move = find_best_move(board)
        make_move(board, move, 'O')
        
        print_board(board)
        if check_winner(board, 'O'):
            print("AI wins!")
            break
        if is_board_full(board):
            print("It's a tie!")
            break

play_game()

